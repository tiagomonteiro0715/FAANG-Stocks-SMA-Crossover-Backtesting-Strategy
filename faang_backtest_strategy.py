
"""
DISCLAMER: This trading algorithm is provided for research purposes only and does not constitute financial advice. 
Trading in financial markets involves substantial risk and is not suitable for every investor. 
Past performance is not indicative of future results. 
The author assumes no responsibility for any financial losses or damages incurred as a result of using this software. 
Use at your own risk.
"""
"""
This Python script is a backtesting strategy for the FAANG stocks (AAPL, META, AMZN, NFLX, GOOGL) using a simple moving average (SMA) crossover technique. The strategy involves the following key components:

1. **Libraries and Data:**
   - `vectorbt`: A vectorized backtesting framework.
   - `yfinance`: Used to download historical stock data.
   - `pandas`: For data manipulation and storage.

2. **Strategy Overview:**
   - The script calculates two moving averages for each stock: a short-term (50-day) and a long-term (200-day) average.
   - A buy signal is generated when the short-term MA crosses above the long-term MA (bullish crossover).
   - A sell signal is generated when the short-term MA crosses below the long-term MA (bearish crossover).

3. **Portfolio Setup:**
   - The initial total portfolio value is set to $1,000,000.
   - This amount is equally distributed across the 5 FAANG stocks.
   
4. **Backtest Execution:**
   - For each stock, historical price data is downloaded from Yahoo Finance starting from January 1, 2004, to January 1, 2024.
   - The backtesting is done using the buy/sell signals generated by the MA crossover.
   - The backtest results, including various performance metrics (total return, volatility, Sharpe ratio, etc.), are stored for each stock.

5. **Performance Evaluation:**
   - The script calculates the Compound Annual Growth Rate (CAGR) for the portfolio, based on the average performance across all FAANG stocks.
   - The results are printed and visualized through plots generated by `vectorbt`.

6. **Output:**
   - The script prints the performance stats for each stock and plots the backtest result for each ticker.
   - The final output includes the average performance across the entire portfolio and the calculated CAGR.

File Name: faang_backtest_strategy.py
"""

import vectorbt as vbt
import yfinance as yf
import pandas as pd

# List of FAANG tickers
faang_tickers = ['AAPL', 'META', 'AMZN', 'NFLX', 'GOOGL']

# Parameters for the strategy
short_window = 50  # Short-term moving average window
long_window = 200  # Long-term moving average window

# Static Portfolio of 1,000,000 dollars
total_cash = 1000000
cash_for_each_company = total_cash / len(faang_tickers)
print("Cash for each company for a static portfolio: " + str(cash_for_each_company))

# List to store performance statistics
performance_stats = []

# Define the CAGR calculation function
def calculate_cagr(total_returns, total_days):
    # CAGR formula based on total return and total days
    # 260 weekdays per year. Stock market only works on weekdays
    return ((1 + total_returns) ** (260 / total_days)) - 1
 

start_date = "2004-01-01"
end_date = "2024-01-01"
# Define the Alpha Model function for backtesting
def alpha_model(symbol, short_window, long_window, cash_for_each_company, start_date=start_date, end_date=end_date):

    # Fetch historical data using yfinance
    data = yf.download(symbol, start=start_date, end=end_date)
    price = data['Close']

    # Calculate the short-term and long-term moving averages
    short_ma = price.rolling(short_window).mean()
    long_ma = price.rolling(long_window).mean()

    # Create buy and sell signals
    entries = short_ma > long_ma  # Buy when short-term MA crosses above long-term MA
    exits = short_ma < long_ma    # Sell when short-term MA crosses below long-term MA

    # Set up the backtest with the frequency set to daily
    pf = vbt.Portfolio.from_signals(price, entries, exits, init_cash=cash_for_each_company, freq='1D')

    # Portfolio performance
    stats = pf.stats()

    return stats, pf

# Loop through each FAANG company and backtest the strategy
for symbol in faang_tickers:
    stats, pf = alpha_model(symbol, short_window, long_window, cash_for_each_company)

    # Store the performance statistics
    performance_stats.append(stats)

    print(f"Performance stats for {symbol}:")
    print(stats)

    # Plot the result
    pf.plot(title=f"{symbol} Strategy Backtest").show()

# Convert the performance stats to a DataFrame
performance_df = pd.DataFrame(performance_stats)

# Calculate the average performance across all stocks
average_performance = performance_df.mean()

average_performance["Start Value"] = total_cash

print("\n\n\n")
print(average_performance)

total_returns = int(average_performance["Total Return [%]"])
total_days = int(average_performance["Period"].days)

compound_annual_growth_rate = calculate_cagr(total_returns, total_days) * 100

print("compound annual growth rate: " + str(compound_annual_growth_rate) + " %")